from flask import Flask, request, render_template
import pickle
import numpy as np
import os
from datetime import datetime
import threading
import time

app = Flask(__name__)

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ lock
all_models = {}
model_lock = threading.Lock()

# ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ----------
def load_all_models():
    """ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î """
    print("\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà...")
    base_path = r"C:\project2\Water_Use\model3"
    model_files = ["humidity", "temp", "wind_speed", "weather"]
    temp_models = {}

    for hour in range(24):
        time_str = f"{hour:02d}.00"
        model_path = os.path.join(base_path, f"{time_str}_model3")
        models_per_hour = {}

        if not os.path.exists(model_path):
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {model_path}")
            continue

        missing = False
        for model_name in model_files:
            file_path = os.path.join(model_path, f"{time_str}_{model_name}.pkl")
            if not os.path.exists(file_path):
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_path}")
                missing = True
                continue
            try:
                with open(file_path, 'rb') as f:
                    models_per_hour[model_name] = pickle.load(f)
                print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î {file_path} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            except Exception as e:
                print(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î {file_path} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
                missing = True

        if not missing and len(models_per_hour) == len(model_files):
            temp_models[time_str] = models_per_hour
            print(f"üïê ‡πÇ‡∏°‡πÄ‡∏î‡∏• {time_str} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        else:
            print(f"‚ö†Ô∏è ‡πÇ‡∏°‡πÄ‡∏î‡∏• {time_str} ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ all_models")

    # üîí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    with model_lock:
        all_models.clear()
        all_models.update(temp_models)
    print("üöÄ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!\n")

# ---------- Background Thread ----------
def auto_reload_models(interval=3600):
    """ Reload model ‡∏ó‡∏∏‡∏Å X ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ """
    while True:
        load_all_models()
        print(f"‚è∞ ‡∏£‡∏≠ {interval} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà...\n")
        time.sleep(interval)

# ---------- ‡πÄ‡∏ß‡∏•‡∏≤ ----------
def get_time_slot():
    current_hour = datetime.now().hour
    return f"{current_hour:02d}.00"

# ---------- Weather Dictionary ----------
weather_dict = {
    0: '‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™', 
    1: '‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πà‡∏°‡πÉ‡∏™', 
    2: '‡∏°‡∏µ‡πÅ‡∏î‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà', 
    3: '‡πÅ‡∏î‡∏î‡∏à‡πâ‡∏≤', 
    4: '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å', 
    5: '‡∏°‡∏∑‡∏î‡∏Ñ‡∏£‡∏∂‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏´‡∏°‡πà‡∏ô‡∏´‡∏°‡∏≠‡∏á', 
    6: '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á ‡πÜ', 
    7: '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà', 
    8: '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô', 
    9: '‡∏´‡∏°‡∏≠‡∏Å', 
    10: '‡πÅ‡∏î‡∏î‡∏à‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏´‡∏°‡∏≠‡∏Å‡∏ö‡∏≤‡∏á', 
    11: '‡∏°‡∏µ‡πÄ‡∏°‡∏Ü‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ù‡∏ô‡∏ï‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á ‡πÜ', 
    12: '‡∏ù‡∏ô‡∏ï‡∏Å ', 
    13: '‡∏ù‡∏ô‡πÇ‡∏õ‡∏£‡∏¢ / ‡∏ù‡∏ô‡∏ï‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á ‡πÜ ', 
    14: '‡πÄ‡∏¢‡πá‡∏ô', 
    15: '‡∏£‡πâ‡∏≠‡∏ô', 
    16: '‡∏°‡∏µ‡∏•‡∏°‡πÅ‡∏£‡∏á'
}


# ---------- Routes ----------
@app.route('/')
def home():
    return render_template("Water_Model.html")
# ---------- Routes ----------# ---------- Routes ----------# ---------- Routes ----------
@app.route('/predict', methods=['POST'])
def predict():
    try:
        form_values = list(request.form.values())
        print(f"üìã ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°: {form_values}")

        if not form_values or all(v.strip() == "" for v in form_values):
            return "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"

        float_features = [float(x) for x in form_values]
        final_input = np.array([float_features])

        selected_time = get_time_slot()

        # üîí ‡πÉ‡∏ä‡πâ lock ‡∏≠‡πà‡∏≤‡∏ô models
        with model_lock:
            models = all_models.get(selected_time)

        if models is None:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selected_time}"

        pred_humidity = models['humidity'].predict(final_input)[0]
        pred_temp = models['temp'].predict(final_input)[0]
        pred_wind_speed = models['wind_speed'].predict(final_input)[0]
        pred_weather = models['weather'].predict(final_input)[0]

        result = weather_dict.get(int(pred_weather), '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ')

        return render_template(
            'Water_Model.html',
            word="‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:",
            answer="‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å:",
            pred=result,
            humidity_pred=f"{pred_humidity:.2f}%",
            temp_pred=f"{pred_temp:.2f}¬∞C",
            wind_pred=f"{pred_wind_speed:.2f} m/s",
            model_used=f"üìå ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {selected_time}"
        )
    except Exception as e:
        return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

@app.route('/predict_all', methods=['POST'])
def predict_all():
    try:
        form_values = list(request.form.values())
        print(f"üìã ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°: {form_values}")

        if not form_values or all(v.strip() == "" for v in form_values):
            return "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"

        float_features = [float(x) for x in form_values]
        final_input = np.array([float_features])

        # ‚úÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        selected_time = get_time_slot()
        with model_lock:
            current_models = all_models.get(selected_time)

        if current_models is None:
            return f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {selected_time}"

        pred_humidity = current_models['humidity'].predict(final_input)[0]
        pred_temp = current_models['temp'].predict(final_input)[0]
        pred_wind_speed = current_models['wind_speed'].predict(final_input)[0]
        pred_weather = current_models['weather'].predict(final_input)[0]
        result = weather_dict.get(int(pred_weather), '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ')

        # ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        pred_humidity = min(max(pred_humidity, 30.5), 98.4)
        pred_temp = min(max(pred_temp, 12.6), 36.8)
        pred_wind_speed = min(max(pred_wind_speed, 0), 5.2)

        # ‚úÖ ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        valid_times = ['00.00', '03.00', '06.00', '09.00', '12.00', '15.00', '18.00', '21.00']
        results = []
        with model_lock:
            for time_str, models in all_models.items():
                if time_str in valid_times:
                    try:
                        pred_humidity_all = min(max(models['humidity'].predict(final_input)[0], 30.5), 98.4)
                        pred_temp_all = min(max(models['temp'].predict(final_input)[0], 12.6), 36.8)
                        pred_wind_speed_all = min(max(models['wind_speed'].predict(final_input)[0], 0), 5.2)
                        pred_weather_all = models['weather'].predict(final_input)[0]

                        result_text = weather_dict.get(int(pred_weather_all), '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ')

                        results.append({
                            'time': time_str,
                            'humidity': f"{pred_humidity_all:.2f}%",
                            'temp': f"{pred_temp_all:.2f}¬∞C",
                            'wind': f"{pred_wind_speed_all:.2f} m/s",
                            'weather': result_text
                        })
                    except Exception as e:
                        print(f"‚ùå ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå {time_str} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
                        continue

        # ‚úÖ render ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        return render_template(
            'Water_Model.html',
            word="‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ:",
            pred=result,
            humidity_pred=f"{pred_humidity:.2f}%",
            temp_pred=f"{pred_temp:.2f}¬∞C",
            wind_pred=f"{pred_wind_speed:.2f} m/s",
            model_used=f"üìå ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {selected_time}",
            results=results,
            input_data=form_values
        )
    except Exception as e:
        return f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"





# ---------- Main ----------
if __name__ == '__main__':
    load_all_models()
    threading.Thread(target=auto_reload_models, args=(3600,), daemon=True).start()
    app.run(debug=True, port=5050)
