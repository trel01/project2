import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import warnings
import pickle

warnings.filterwarnings("ignore")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data = pd.read_csv(r"C:\project2\Water_Use\CSV3\17.00_weather.csv")

# ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
data = data.dropna()

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
encoder = LabelEncoder()
data["Weather Condition"] = encoder.fit_transform(data["Weather Condition"])  

# ‡πÅ‡∏¢‡∏Å features (X) ‡πÅ‡∏•‡∏∞ labels (y)
y = data["Weather Condition"].values  
X = data.drop(columns=["Weather Condition"]).values.astype(float)  

# ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train ‡πÅ‡∏•‡∏∞ test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# üîπ ‡πÉ‡∏ä‡πâ Decision Tree Classifier
dt_model = DecisionTreeClassifier(criterion="entropy", max_depth=5, random_state=0)

# ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
dt_model.fit(X_train, y_train)

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ pickle
model_path = r"C:\project2\Water_Use\model3\17.00_model3\17.00_weather.pkl"
with open(model_path, 'wb') as file:
    pickle.dump(dt_model, file)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
with open(model_path, 'rb') as file:
    model = pickle.load(file)

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Weather Condition
y_pred = model.predict(X_test)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Weather Condition ‡πÄ‡∏î‡∏¥‡∏°
y_pred_labels = encoder.inverse_transform(y_pred)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
print("Predicted Weather Conditions:", y_pred_labels)
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
