import numpy as np
import pandas as pd
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
import pickle
import warnings

warnings.filterwarnings("ignore")

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data = pd.read_csv(r"C:\project2\Water_Use\CSV3\22.00_wind_speed.csv")

# ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
data = data.dropna()

# üîπ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
encoder = LabelEncoder()
data["Weather Condition"] = encoder.fit_transform(data["Weather Condition"])  

# ‡πÅ‡∏¢‡∏Å features (X) ‡πÅ‡∏•‡∏∞ labels (y)
y = data["Weather Condition"].values  
X = data.drop(columns=["Weather Condition"]).values.astype(float)  

# üîπ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Standardization)
scaler = StandardScaler()
X = scaler.fit_transform(X)

# ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• train ‡πÅ‡∏•‡∏∞ test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# üîπ ‡πÉ‡∏ä‡πâ Support Vector Classifier (SVM)
svm_model = SVC(kernel='rbf', C=1.0, gamma='scale', probability=True, random_state=0)

# ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
svm_model.fit(X_train, y_train)

# üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢ pickle
model_path = r"C:\project2\Water_Use\model3\22.00_model3\22.00_wind_speed.pkl"
with open(model_path, 'wb') as file:
    pickle.dump((svm_model, scaler), file)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ scaler

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
with open(model_path, 'rb') as file:
    model, scaler = pickle.load(file)

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Weather Condition
X_test_scaled = scaler.transform(X_test)
y_pred = model.predict(X_test_scaled)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Weather Condition ‡πÄ‡∏î‡∏¥‡∏°
y_pred_labels = encoder.inverse_transform(y_pred)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
print("Predicted Weather Conditions:", y_pred_labels)
print("X_train shape:", X_train.shape)
print("X_test shape:", X_test.shape)
